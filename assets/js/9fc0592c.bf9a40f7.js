"use strict";(self.webpackChunkcreate_mongonext_app_docs=self.webpackChunkcreate_mongonext_app_docs||[]).push([[8208],{8204:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ui-components/rag-chatbot","title":"RAG Chatbot Setup & Capabilities","description":"Overview","source":"@site/docs/ui-components/rag-chatbot.md","sourceDirName":"ui-components","slug":"/ui-components/rag-chatbot","permalink":"/docs/ui-components/rag-chatbot","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ui-components/rag-chatbot.md","tags":[],"version":"current","frontMatter":{"id":"rag-chatbot","title":"RAG Chatbot Setup & Capabilities","sidebar_label":"\ud83e\udd16 RAG Chatbot"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcd3 Component Library","permalink":"/docs/ui-components/component-library"},"next":{"title":"Admin Dashboard","permalink":"/docs/admin-dashboard"}}');var i=t(4848),r=t(8453);const o={id:"rag-chatbot",title:"RAG Chatbot Setup & Capabilities",sidebar_label:"\ud83e\udd16 RAG Chatbot"},a="RAG Chatbot Setup & Capabilities",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Features",id:"features",level:2},{value:"Administrative Features",id:"administrative-features",level:2},{value:"RAG Document Management",id:"rag-document-management",level:3},{value:"Processing &amp; Chunk Creation",id:"processing--chunk-creation",level:3},{value:"Vector Index Management",id:"vector-index-management",level:3},{value:"Setup Instructions",id:"setup-instructions",level:2},{value:"1. <strong>Environment Variables</strong>",id:"1-environment-variables",level:3},{value:"2. <strong>MongoDB Atlas Vector Index</strong>",id:"2-mongodb-atlas-vector-index",level:3},{value:"3. <strong>Uploading and Processing Documents</strong>",id:"3-uploading-and-processing-documents",level:3},{value:"4. <strong>Chatbot Usage</strong>",id:"4-chatbot-usage",level:3},{value:"5. <strong>Supported Document Formats</strong>",id:"5-supported-document-formats",level:3},{value:"Customization &amp; Extensibility",id:"customization--extensibility",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"For Documentation Writers",id:"for-documentation-writers",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rag-chatbot-setup--capabilities",children:"RAG Chatbot Setup & Capabilities"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The RAG (Retrieval-Augmented Generation) Chatbot is an AI-powered assistant integrated into your MongoNext app. It leverages your own documents (RAG Documents) and combines them with OpenAI's LLMs to answer user questions with contextually relevant, up-to-date information."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Floating Chatbot UI"}),": Accessible from any page, with expand/collapse functionality for a larger chat window."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Semantic Search"}),": Uses OpenAI embeddings and MongoDB Atlas Vector Search to find the most relevant document chunks for a user's question."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LLM Synthesis"}),": Sends the retrieved context and user question to OpenAI's GPT model to generate a conversational, markdown-formatted answer."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Markdown Rendering"}),": Bot responses are rendered as markdown, supporting headings, lists, code, links, and more."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Admin Controls"}),": Admins can manage RAG documents and vector index settings from the admin dashboard."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"administrative-features",children:"Administrative Features"}),"\n",(0,i.jsx)(n.h3,{id:"rag-document-management",children:"RAG Document Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Upload Documents"}),": Admins can upload new documents (PDF, Markdown, HTML, TXT, etc.) via the ",(0,i.jsx)(n.strong,{children:"Admin > RAG > RAG Documents"})," page."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"View & Delete"}),": Uploaded documents are listed with metadata (title, type, upload date, etc.), and can be deleted if needed."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"processing--chunk-creation",children:"Processing & Chunk Creation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Process Documents"}),": After uploading, admins can trigger processing for each document. This will:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Extract the text content from the document."}),"\n",(0,i.jsx)(n.li,{children:"Split the content into manageable chunks using the app's chunking strategy."}),"\n",(0,i.jsx)(n.li,{children:"For each chunk, generate an OpenAI embedding and store it in the database."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chunk Management"}),": Each processed document is associated with its chunks, which are used for vector search and retrieval."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status Feedback"}),": The admin UI provides feedback on processing status and chunk counts for each document."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"vector-index-management",children:"Vector Index Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check/Create Vector Index"}),": Admins can check if the required MongoDB Atlas vector index exists and create it if needed from the ",(0,i.jsx)(n.strong,{children:"Admin > RAG > RAG Settings"})," page."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"setup-instructions",children:"Setup Instructions"}),"\n",(0,i.jsxs)(n.h3,{id:"1-environment-variables",children:["1. ",(0,i.jsx)(n.strong,{children:"Environment Variables"})]}),"\n",(0,i.jsxs)(n.p,{children:["Ensure the following are set in your ",(0,i.jsx)(n.code,{children:".env.local"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-env",children:"MONGODB_URI=your_mongodb_atlas_connection_string\nOPENAI_API_KEY=your_openai_api_key\nATLAS_GROUP_ID=your_atlas_project_id\nATLAS_CLUSTER_NAME=your_atlas_cluster_name\nATLAS_API_PUBLIC_KEY=your_atlas_public_key\nATLAS_API_PRIVATE_KEY=your_atlas_private_key\nATLAS_DB_NAME=your_database_name\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-mongodb-atlas-vector-index",children:["2. ",(0,i.jsx)(n.strong,{children:"MongoDB Atlas Vector Index"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The chatbot requires a vector index on the ",(0,i.jsx)(n.code,{children:"ragchunks"})," collection, field ",(0,i.jsx)(n.code,{children:"embedding"}),", named ",(0,i.jsx)(n.code,{children:"default"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["You can check and create this index from the ",(0,i.jsx)(n.strong,{children:"Admin > RAG > RAG Settings"})," page."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"3-uploading-and-processing-documents",children:["3. ",(0,i.jsx)(n.strong,{children:"Uploading and Processing Documents"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Upload documents via the ",(0,i.jsx)(n.strong,{children:"Admin > RAG > RAG Documents"})," page."]}),"\n",(0,i.jsx)(n.li,{children:"After upload, process each document to split it into chunks and generate embeddings (uses OpenAI API)."}),"\n",(0,i.jsx)(n.li,{children:"Each chunk will be stored with its embedding in MongoDB."}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"4-chatbot-usage",children:["4. ",(0,i.jsx)(n.strong,{children:"Chatbot Usage"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The floating chatbot appears on all pages."}),"\n",(0,i.jsx)(n.li,{children:"Users can ask questions in natural language."}),"\n",(0,i.jsxs)(n.li,{children:["The chatbot will:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Search for the most relevant chunks using vector search."}),"\n",(0,i.jsx)(n.li,{children:"Send the context and question to OpenAI's GPT model."}),"\n",(0,i.jsx)(n.li,{children:"Display a markdown-formatted answer."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Users can expand the chatbot window for a better view."}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"5-supported-document-formats",children:["5. ",(0,i.jsx)(n.strong,{children:"Supported Document Formats"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The system is designed to work with a variety of document formats (PDF, Markdown, HTML, TXT, etc.)."}),"\n",(0,i.jsx)(n.li,{children:"Regardless of the original format, the chatbot's answers are always formatted as markdown for clarity and readability."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"customization--extensibility",children:"Customization & Extensibility"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You can adjust the chunking strategy, embedding model, or LLM prompt in the codebase."}),"\n",(0,i.jsx)(n.li,{children:"Markdown rendering can be further customized (e.g., syntax highlighting, tables, etc.)."}),"\n",(0,i.jsx)(n.li,{children:"The chatbot UI is built with Material UI and can be styled or extended as needed."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No Answers/Errors"}),": Ensure embeddings are generated for all chunks and the vector index exists."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OpenAI Errors"}),": Check your API key and usage limits."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Formatting Issues"}),": The chatbot uses markdown rendering; ensure your documents are processed and chunked correctly."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"for-documentation-writers",children:"For Documentation Writers"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Review and expand these instructions as needed."}),"\n",(0,i.jsx)(n.li,{children:"Add screenshots or GIFs of the chatbot in use."}),"\n",(0,i.jsx)(n.li,{children:"Document any customizations or advanced use cases implemented in your project."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);